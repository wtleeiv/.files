#+TITLE: Emacs Config
#+AUTHOR: Tyler Lee
#+EMAIL: wtleeiv@gmail.com
* TODOs

switch font-size check to osx

** test

- fill-length
  - 65 :: 1/2 screen-width

* migration

- [[https://github.com/politza/pdf-tools][pdf-tools]] :: install libs

* global

Itsame, a Tyler!
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tyler Lee"
        user-mail-address "wtleeiv@gmail.com")
#+END_SRC

** setup

Install, set up, and require ~use-package~.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  ;; log load times in *Messages*
  ;; auto-install packages
  (setq use-package-verbose t
        use-package-always-ensure t)
  ;; load use-package
  (require 'use-package)
#+END_SRC

Inherit PATH from SHELL.
#+BEGIN_SRC emacs-lisp
  (defun ty/inherit-PATH-from-SHELL ()
    (let ((shell-path (shell-command-to-string "$SHELL -i -c 'echo $PATH'")))
      ;; -i :: interactive shell
      ;; -c :: read command from string
      (setenv "PATH" shell-path)
      (setq exec-path (split-string shell-path path-separator))))
  (when window-system
    (ty/inherit-PATH-from-SHELL))
#+END_SRC

Set fill-column to half-page (on chromebook).
TODO: debug when emacs 26.1 comes out (variable watch).
This doesn't work now...
#+BEGIN_SRC emacs-lisp
  (require 'simple)
  (set-fill-column 65)
#+END_SRC

Source directory location.
#+BEGIN_SRC emacs-lisp
  (setq source-directory "~/.emacs.d/src/")
#+END_SRC

Backup all files in one place. Flat, no tree structure, ! as
dir-separator.
#+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("" . "~/.emacs.d/backup"))
          auto-save-file-name-transforms `((".*"  "~/.emacs.d/backup/" t)))
#+END_SRC

Don't present the usual startup message, and clear the scratch
buffer.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message nil)
#+END_SRC

Add file sizes in human-readable units (KB, MB, etc) to dired
buffers.
#+BEGIN_SRC emacs-lisp
  ;; human-readable dired filesizes
  (setq-default dired-listing-switches "-alh")
#+END_SRC

When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** cosmetics

Color theme.
#+BEGIN_SRC emacs-lisp
  (use-package noctilux-theme
               :config
               (load-theme 'noctilux t))
  (set-cursor-color "#ccaaff")
  (set-face-attribute 'show-paren-match nil :foreground "#ccaaff")
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-attribute 'show-paren-match nil :weight 'ultra-bold)
#+END_SRC

Font.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               `(font . ,(if (eq window-system 'x)
                             "Source Code Pro-11"
                           "Source Code Pro-13")))
#+END_SRC

Show matching parentheses.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
#+END_SRC

Highlight current line when using graphical emacs.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

Syntax highlight whenever possible.
#+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
#+END_SRC

** functionality

Delete trailing whitespace every time a buffer is saved.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

When saving a file that starts with `#!', make it executable.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

One space after periods.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

If you save a file that doesn't end with a newline, automatically
append one.
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Alias 'yes/no?' to 'y/n?'.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Unique buffer names.
#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style 'post-forward)
#+END_SRC

* packages

** ivy

Install counsel if needed. Counsel pulls in ivy/swiper as
dependencies. Initialize ivy.
#+BEGIN_SRC emacs-lisp
  (when (not (package-installed-p 'counsel))
    (package-install 'counsel))

  (use-package ivy
    :config
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) ")
    (ivy-mode 1))
  ;; remaps
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)

  (global-set-key (kbd "C-h f") 'counsel-describe-function)
  (global-set-key (kbd "C-h v") 'counsel-describe-variable)
  (global-set-key (kbd "C-h S") 'counsel-info-lookup-symbol)

  (global-set-key (kbd "C-c L") 'counsel-find-library)
  (global-set-key (kbd "C-c U") 'counsel-unicode-char)
#+END_SRC
** org

Syntax highlight code.
Tab format code.
Don't ask before running code w/ C-c C-c.
#+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil)
#+END_SRC

Enable languages within org.
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ipython . t)
     (python . t)))
#+END_SRC

** magit

Bind to =C-c g=
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-c g" . magit-status))
#+END_SRC

** company

Enable company everywhere.
C-h :: view docs (f1)
C-w :: view source
#+BEGIN_SRC emacs-lisp
  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)

  (define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
  (define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort)
#+END_SRC

** flycheck

Enable everywhere.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC

** pdf-tools

~pdf-tools-install~ required for setup.
Override midnight mode colors.
C-c C-r m :: toggle midnight-mode
#+BEGIN_SRC emacs-lisp
  (when (eq window-system 'x) ; linux graphical
    (use-package pdf-tools
      :config
      (pdf-tools-install)
      (setq pdf-view-midnight-colors '("#ffffff" . "#000000"))))
#+END_SRC

* languages

** lisp

Sly is installed by roswell.
#+BEGIN_SRC emacs-lisp
  (when (eq window-system 'x)
    (load (expand-file-name "~/.roswell/helper.el")))

  (use-package paredit
    :config
    (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'lisp-mode-hook 'enable-paredit-mode)
    (add-hook 'sly-mrepl-mode-hook 'enable-paredit-mode))

  ;; suggested paredit config
  (require 'eldoc)
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)

   (use-package aggressive-indent
     :config
     (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode)
     (add-hook 'lisp-mode-hook 'aggressive-indent-mode)
     (add-hook 'sly-mrepl-mode-hook 'aggressive-indent-mode))
#+END_SRC

** python

Use elpy, ipython interpreter, org-ipython.
Remove flymake from elpy.
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config
    (elpy-enable)
    (setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
    (setq elpy-modules (remq 'elpy-module-flymake elpy-modules)))

  (use-package ob-ipython
    :defer t)
#+END_SRC
